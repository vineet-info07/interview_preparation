function flattenObject(obj) {
  const result = {};
  function recurse(current, path = "") {
    if (typeof current !== "object" || current === null) {
      result[current] = path;
    } else {
      for (let key in current) {
        const newPath = path ? `${path}.${key}` : key;
        recurse(current[key], newPath);
      }
    }
  }
  recurse(obj);
  return result;
}

const nestedObject = {
  a: 1,
  b: {
    c: 2,
    d: {
      e: 3,
      f: {
        g: 4,
      },
    },
  },
  h: 5,
};

const flattenedObject = flattenObject(nestedObject);
console.log(flattenedObject);

// function flattenObject(obj) {
//   return Object.keys(obj).reduce((acc, key) => {
//     const value = obj[key];
//     if (typeof value === 'object' && value !== null) {
//       const flatObject = flattenObject(value);
//       Object.keys(flatObject).forEach(subKey => {
//         acc[`${key}.${subKey}`] = flatObject[subKey];
//       });
//     } else {
//       acc[key] = value;
//     }
//     return acc;
//   }, {});
// }

function flattenObject(obj, parentKey = "") {
  return Object.keys(obj).reduce((acc, key) => {
    const prefixedKey = parentKey ? `${parentKey}.${key}` : key;
    if (typeof obj[key] === "object" && obj[key] !== null) {
      Object.assign(acc, flattenObject(obj[key], prefixedKey));
    } else {
      acc[prefixedKey] = obj[key];
    }
    return acc;
  }, {});
}

const obj = {
  A: "a",
  B: "b",
  C: {
    D: "d",
    E: "e",
    F: {
      G: "g",
      H: "h",
    },
  },
  I: "i",
};

const flattenedObj = flattenObject(obj);
console.log(flattenedObj);
console.log(obj);
